# -*- coding: utf-8 -*-
# 导入所需的库
import numpy as np
import json
from PIL import Image
import os
import sys

# 深度值到颜色的映射表
color_map = [
    (128, 0, 0),     (132, 0, 0),     (136, 0, 0),     (140, 0, 0),
    (144, 0, 0),     (148, 0, 0),     (152, 0, 0),     (156, 0, 0),
    (160, 0, 0),     (164, 0, 0),     (168, 0, 0),     (172, 0, 0),
    (176, 0, 0),     (180, 0, 0),     (184, 0, 0),     (188, 0, 0),
    (192, 0, 0),     (196, 0, 0),     (200, 0, 0),     (204, 0, 0),
    (208, 0, 0),     (212, 0, 0),     (216, 0, 0),     (220, 0, 0),
    (224, 0, 0),     (228, 0, 0),     (232, 0, 0),     (236, 0, 0),
    (240, 0, 0),     (244, 0, 0),     (248, 0, 0),     (252, 0, 0),
    (255, 0, 0),     (255, 4, 0),     (255, 8, 0),     (255, 12, 0),
    (255, 16, 0),    (255, 20, 0),    (255, 24, 0),    (255, 28, 0),
    (255, 32, 0),    (255, 36, 0),    (255, 40, 0),    (255, 44, 0),
    (255, 48, 0),    (255, 52, 0),    (255, 56, 0),    (255, 60, 0),
    (255, 64, 0),    (255, 68, 0),    (255, 72, 0),    (255, 76, 0),
    (255, 80, 0),    (255, 84, 0),    (255, 88, 0),    (255, 92, 0),
    (255, 96, 0),    (255, 100, 0),   (255, 104, 0),   (255, 108, 0),
    (255, 112, 0),   (255, 116, 0),   (255, 120, 0),   (255, 124, 0),
    (255, 128, 0),   (255, 132, 0),   (255, 136, 0),   (255, 140, 0),
    (255, 144, 0),   (255, 148, 0),   (255, 152, 0),   (255, 156, 0),
    (255, 160, 0),   (255, 164, 0),   (255, 168, 0),   (255, 172, 0),
    (255, 176, 0),   (255, 180, 0),   (255, 184, 0),   (255, 188, 0),
    (255, 192, 0),   (255, 196, 0),   (255, 200, 0),   (255, 204, 0),
    (255, 208, 0),   (255, 212, 0),   (255, 216, 0),   (255, 220, 0),
    (255, 224, 0),   (255, 228, 0),   (255, 232, 0),   (255, 236, 0),
    (255, 240, 0),   (255, 244, 0),   (255, 248, 0),   (255, 252, 0),
    (254, 255, 1),   (250, 255, 6),   (246, 255, 10),  (242, 255, 14),
    (238, 255, 18),  (234, 255, 22),  (230, 255, 26),  (226, 255, 30),
    (222, 255, 34),  (218, 255, 38),  (214, 255, 42),  (210, 255, 46),
    (206, 255, 50),  (202, 255, 54),  (198, 255, 58),  (194, 255, 62),
    (190, 255, 66),  (186, 255, 70),  (182, 255, 74),  (178, 255, 78),
    (174, 255, 82),  (170, 255, 86),  (166, 255, 90),  (162, 255, 94),
    (158, 255, 98),  (154, 255, 102), (150, 255, 106), (146, 255, 110),
    (142, 255, 114), (138, 255, 118), (134, 255, 122), (130, 255, 126),
    (126, 255, 130), (122, 255, 134), (118, 255, 138), (114, 255, 142),
    (110, 255, 146), (106, 255, 150), (102, 255, 154), (98, 255, 158),
    (94, 255, 162),  (90, 255, 166),  (86, 255, 170),  (82, 255, 174),
    (78, 255, 178),  (74, 255, 182),  (70, 255, 186),  (66, 255, 190),
    (62, 255, 194),  (58, 255, 198),  (54, 255, 202),  (50, 255, 206),
    (46, 255, 210),  (42, 255, 214),  (38, 255, 218),  (34, 255, 222),
    (30, 255, 226),  (26, 255, 230),  (22, 255, 234),  (18, 255, 238),
    (14, 255, 242),  (10, 255, 246),  (6, 255, 250),   (2, 255, 254),
    (0, 252, 255),   (0, 248, 255),   (0, 244, 255),   (0, 240, 255),
    (0, 236, 255),   (0, 232, 255),   (0, 228, 255),   (0, 224, 255),
    (0, 220, 255),   (0, 216, 255),   (0, 212, 255),   (0, 208, 255),
    (0, 204, 255),   (0, 200, 255),   (0, 196, 255),   (0, 192, 255),
    (0, 188, 255),   (0, 184, 255),   (0, 180, 255),   (0, 176, 255),
    (0, 172, 255),   (0, 168, 255),   (0, 164, 255),   (0, 160, 255),
    (0, 156, 255),   (0, 152, 255),   (0, 148, 255),   (0, 144, 255),
    (0, 140, 255),   (0, 136, 255),   (0, 132, 255),   (0, 128, 255),
    (0, 124, 255),   (0, 120, 255),   (0, 116, 255),   (0, 112, 255),
    (0, 108, 255),   (0, 104, 255),   (0, 100, 255),   (0, 96, 255),
    (0, 92, 255),    (0, 88, 255),    (0, 84, 255),    (0, 80, 255),
    (0, 76, 255),    (0, 72, 255),    (0, 68, 255),    (0, 64, 255),
    (0, 60, 255),    (0, 56, 255),    (0, 52, 255),    (0, 48, 255),
    (0, 44, 255),    (0, 40, 255),    (0, 36, 255),    (0, 32, 255),
    (0, 28, 255),    (0, 24, 255),    (0, 20, 255),    (0, 16, 255),
    (0, 12, 255),    (0, 8, 255),     (0, 4, 255),     (0, 0, 255),
    (0, 0, 252),     (0, 0, 248),     (0, 0, 244),     (0, 0, 240),
    (0, 0, 236),     (0, 0, 232),     (0, 0, 228),     (0, 0, 224),
    (0, 0, 220),     (0, 0, 216),     (0, 0, 212),     (0, 0, 208),
    (0, 0, 204),     (0, 0, 200),     (0, 0, 196),     (0, 0, 192),
    (0, 0, 188),     (0, 0, 184),     (0, 0, 180),     (0, 0, 176),
    (0, 0, 172),     (0, 0, 168),     (0, 0, 164),     (0, 0, 160),
    (0, 0, 156),     (0, 0, 152),     (0, 0, 148),     (0, 0, 144),
    (0, 0, 140),     (0, 0, 136),     (0, 0, 132),     (0, 0, 128)
]

def read_json_data(path):
    """从JSON文件读取并返回所有帧数据。"""
    try:
        # 在尝试打开文件前打印路径，便于调试
        print(f"正在尝试打开文件: {path}")
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"成功加载文件：{path}，共 {len(data)} 帧。")
        return data
    except FileNotFoundError:
        print(f"错误: 文件未找到，请检查路径是否正确: {path}")
        return None
    except json.JSONDecodeError:
        print(f"错误: 无法解析JSON文件: {path}")
        return None

def convert_and_save_images(json_path, output_dir):
    """
    从JSON文件读取所有帧的深度数据，将其转换为RGB图像，并保存到指定目录。
    
    Args:
        json_path (str): 包含深度数据的JSON文件路径。
        output_dir (str): 输出RGB图像的保存目录。
    """
    frames_data = read_json_data(json_path)
    if not frames_data:
        # 新增检查: 如果 frames_data 为空，则没有数据可处理
        print("警告: 读取的JSON文件中没有找到帧数据，请检查文件内容。")
        return
    
    # 确保输出目录存在
    try:
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            print(f"已创建输出目录: {output_dir}")
    except OSError as e:
        print(f"错误: 无法创建目录 '{output_dir}'。请检查路径和权限。错误信息: {e}")
        return
        
    for i, frame_data in enumerate(frames_data):
        # 修复: 检查并处理数组大小不匹配的问题
        if len(frame_data) == 10001:
            print(f"警告: 第 {i} 帧数据包含 {len(frame_data)} 个元素。已移除最后一个元素以匹配 100x100 的尺寸。")
            frame_data = frame_data[:-1]
        elif len(frame_data) != 10000:
            print(f"错误: 第 {i} 帧数据包含 {len(frame_data)} 个元素，无法重塑为 100x100。")
            continue
            
        # 将一维数据转换为二维数组 (100x100)
        try:
            frame = np.array(frame_data).reshape((100, 100))
        except ValueError as e:
            print(f"处理第 {i} 帧时出错: 无法将数组重塑为 (100, 100)。错误信息: {e}")
            continue

        # 应用颜色映射
        image_array = np.zeros((100, 100, 3), dtype=np.uint8)
        for row in range(100):
            for col in range(100):
                depth = frame[row, col]
                # 确保索引不超出 color_map 的范围
                image_array[row, col] = color_map[depth % len(color_map)]
        
        # 使用PIL库创建图像
        pil_img = Image.fromarray(image_array)
        
        # 构建唯一的输出文件名
        output_path = os.path.join(output_dir, f"frame_{i:04d}.png")
        
        # 保存图像
        try:
            pil_img.save(output_path)
            print(f"图像 {output_path} 已成功保存。")
        except IOError as e:
            print(f"错误: 无法保存图像到 '{output_path}'。请检查路径和权限。错误信息: {e}")
            continue
            
    print(f"\n所有图像处理完毕！")
    print(f"图像保存在以下目录：")
    print(f"{output_dir}")
    # 在Windows中打开输出文件夹
    try:
        os.startfile(output_dir)
    except:
        print(f"请手动打开文件夹查看结果：{output_dir}")

if __name__ == "__main__":
    # 获取当前脚本的目录
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # 创建输出的基础目录
    base_output_dir = os.path.join(os.path.dirname(current_dir), "output_images")
    if not os.path.exists(base_output_dir):
        os.makedirs(base_output_dir)
    
    print("请输入ToF数据的JSON文件名（比如 tof_data.json）：")
    json_file = input().strip()
    input_json_path = os.path.join(current_dir, json_file)
    
    print("请输入输出图片文件夹名称（比如 tof_images）：")
    output_folder = input().strip()
    output_dir_path = os.path.join(base_output_dir, output_folder)
    
    # 检查输入文件是否存在
    if not os.path.exists(input_json_path):
        print(f"错误：输入文件 {input_json_path} 不存在！")
        sys.exit(1)
    
    print(f"\n使用以下路径：")
    print(f"输入JSON文件: {input_json_path}")
    print(f"输出目录: {output_dir_path}\n")
    
    # 确认是否继续
    print("是否继续处理？(y/n)")
    if input().lower() != 'y':
        print("已取消处理")
        sys.exit(0)
        
    convert_and_save_images(input_json_path, output_dir_path)

